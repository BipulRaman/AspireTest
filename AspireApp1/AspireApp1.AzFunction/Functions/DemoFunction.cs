using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Net;
using AspireApp1.CorrelationId.AzureFunctions;

namespace AspireApp1.AzFunction.Functions;

/// <summary>
/// Demo Function showcasing all correlation ID features and scenarios
/// </summary>
public class DemoFunction : CorrelatedHttpFunction
{
    private readonly ICorrelatedHttpClient _httpClient;

    public DemoFunction(
        ILoggerFactory loggerFactory, 
        IEnhancedCorrelationIdService correlationIdService,
        IOptions<CorrelationIdOptions> options,
        ICorrelatedHttpClient httpClient)
        : base(loggerFactory.CreateLogger<DemoFunction>(), correlationIdService, options)
    {
        _httpClient = httpClient;
    }

    /// <summary>
    /// Demonstrates basic correlation ID functionality
    /// Call without headers to see auto-generation, or with X-Custom-Correlation-Id to see tracking
    /// </summary>
    [Function("BasicDemo")]
    public async Task<HttpResponseData> BasicDemo(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = "demo/basic")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Running basic correlation ID demo");

            await Task.Delay(50); // Simulate some processing

            var result = new
            {
                Message = "Basic Correlation ID Demo",
                CorrelationId = CorrelationIdService.CorrelationId,
                AutoGenerated = !req.Headers.Any(h => h.Key == "X-Custom-Correlation-Id"),
                AllCapturedHeaders = CorrelationIdService.CapturedHeaders,
                Timestamp = DateTime.UtcNow
            };

            Logger.LogInformation("Basic demo completed");

            return await CreateJsonResponseAsync(req, result);
        });
    }

    /// <summary>
    /// Demonstrates additional headers capture
    /// Send with headers: X-User-Id, X-Event-Id, X-Tenant-Id, X-Request-Source
    /// </summary>
    [Function("AdditionalHeadersDemo")]
    public async Task<HttpResponseData> AdditionalHeadersDemo(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = "demo/headers")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Running additional headers demo");

            // Show captured headers
            var capturedHeaders = CorrelationIdService.CapturedHeaders;
            
            Logger.LogInformation("Captured {HeaderCount} headers: {Headers}", 
                capturedHeaders.Count, 
                string.Join(", ", capturedHeaders.Select(h => $"{h.Key}={h.Value}")));

            var result = new
            {
                Message = "Additional Headers Demo",
                CapturedHeaders = capturedHeaders,
                SpecificHeaders = new
                {
                    CorrelationId = CorrelationIdService.CorrelationId,
                    UserId = CorrelationIdService.GetHeader("X-User-Id"),
                    EventId = CorrelationIdService.GetHeader("X-Event-Id"),
                    TenantId = CorrelationIdService.GetHeader("X-Tenant-Id"),
                    RequestSource = CorrelationIdService.GetHeader("X-Request-Source")
                },
                Instructions = "Send request with headers: X-User-Id, X-Event-Id, X-Tenant-Id, X-Request-Source to see them captured",
                Timestamp = DateTime.UtcNow
            };

            return await CreateJsonResponseAsync(req, result);
        });
    }

    /// <summary>
    /// Demonstrates HTTP client propagation of custom headers
    /// </summary>
    [Function("HttpPropagationDemo")]
    public async Task<HttpResponseData> HttpPropagationDemo(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = "demo/http-propagation")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Running HTTP propagation demo");

            // Show what headers we have before making HTTP calls
            var beforeHeaders = CorrelationIdService.CapturedHeaders;
            Logger.LogInformation("Headers before HTTP call: {Headers}", 
                string.Join(", ", beforeHeaders.Select(h => $"{h.Key}={h.Value}")));

            // Make HTTP call - all headers will be automatically propagated
            Logger.LogInformation("Making HTTP call to external service - headers will be automatically propagated");
            var response = await _httpClient.GetAsync("headers"); // httpbin.org/headers shows received headers

            var responseContent = await response.Content.ReadAsStringAsync();
            Logger.LogInformation("HTTP call completed - external service received our headers");

            var result = new
            {
                Message = "HTTP Client Propagation Demo",
                SentHeaders = beforeHeaders,
                ExternalServiceResponse = responseContent,
                Notes = new[]
                {
                    "All captured headers (including custom correlation ID header) are automatically sent to external APIs",
                    "The external service response shows what headers it received from us",
                    "Headers like X-Custom-Correlation-Id, X-User-Id, etc. are propagated automatically"
                },
                Timestamp = DateTime.UtcNow
            };

            return await CreateJsonResponseAsync(req, result);
        });
    }

    /// <summary>
    /// Demonstrates programmatic header manipulation
    /// </summary>
    [Function("ProgrammaticHeadersDemo")]
    public async Task<HttpResponseData> ProgrammaticHeadersDemo(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "demo/programmatic")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Running programmatic headers demo");

            // Show initial headers
            var initialHeaders = CorrelationIdService.CapturedHeaders;
            Logger.LogInformation("Initial headers: {Headers}", 
                string.Join(", ", initialHeaders.Select(h => $"{h.Key}={h.Value}")));

            // Set additional headers programmatically
            CorrelationIdService.SetAdditionalHeaders(new Dictionary<string, string>
            {
                { "X-Processing-Stage", "demo-execution" },
                { "X-Function-Name", "ProgrammaticHeadersDemo" },
                { "X-Processing-Time", DateTime.UtcNow.ToString("O") },
                { "X-Demo-Flag", "true" }
            });

            Logger.LogInformation("Added programmatic headers");

            // Show updated headers
            var updatedHeaders = CorrelationIdService.CapturedHeaders;
            Logger.LogInformation("Updated headers: {Headers}", 
                string.Join(", ", updatedHeaders.Select(h => $"{h.Key}={h.Value}")));

            // Make HTTP call to see propagation of programmatic headers
            Logger.LogInformation("Making HTTP call with programmatically set headers");
            var httpResponse = await _httpClient.PostAsJsonAsync("post", new { test = "data" });
            var httpContent = await httpResponse.Content.ReadAsStringAsync();

            var result = new
            {
                Message = "Programmatic Headers Demo",
                InitialHeaders = initialHeaders,
                ProgrammaticallyAdded = new[]
                {
                    "X-Processing-Stage",
                    "X-Function-Name", 
                    "X-Processing-Time",
                    "X-Demo-Flag"
                },
                FinalHeaders = updatedHeaders,
                HttpCallResult = httpContent,
                Notes = "Headers set programmatically are also propagated to HTTP calls",
                Timestamp = DateTime.UtcNow
            };

            return await CreateJsonResponseAsync(req, result);
        });
    }

    /// <summary>
    /// Demonstrates complex workflow with multiple stages and HTTP calls
    /// </summary>
    [Function("ComplexWorkflowDemo")]
    public async Task<HttpResponseData> ComplexWorkflowDemo(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "demo/workflow")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Starting complex workflow demo");

            var workflowStages = new List<object>();

            // Stage 1: Initialize
            CorrelationIdService.SetAdditionalHeaders(new Dictionary<string, string>
            {
                { "X-Workflow-Stage", "initialization" },
                { "X-Workflow-Id", Guid.NewGuid().ToString() }
            });

            Logger.LogInformation("Workflow Stage 1: Initialization");
            await Task.Delay(100);
            workflowStages.Add(new { Stage = 1, Name = "initialization", Headers = new Dictionary<string, string>(CorrelationIdService.CapturedHeaders) });

            // Stage 2: Data validation
            CorrelationIdService.SetAdditionalHeaders(new Dictionary<string, string>
            {
                { "X-Workflow-Stage", "validation" }
            });

            Logger.LogInformation("Workflow Stage 2: Data Validation");
            var validationResponse = await _httpClient.GetAsync("status/200");
            await Task.Delay(150);
            workflowStages.Add(new { Stage = 2, Name = "validation", Headers = new Dictionary<string, string>(CorrelationIdService.CapturedHeaders) });

            // Stage 3: External processing
            CorrelationIdService.SetAdditionalHeaders(new Dictionary<string, string>
            {
                { "X-Workflow-Stage", "external-processing" }
            });

            Logger.LogInformation("Workflow Stage 3: External Processing");
            var processingResponse = await _httpClient.PostAsJsonAsync("post", new { workflow = "demo" });
            await Task.Delay(200);
            workflowStages.Add(new { Stage = 3, Name = "external-processing", Headers = new Dictionary<string, string>(CorrelationIdService.CapturedHeaders) });

            // Stage 4: Finalization
            CorrelationIdService.SetAdditionalHeaders(new Dictionary<string, string>
            {
                { "X-Workflow-Stage", "finalization" },
                { "X-Workflow-Status", "completed" }
            });

            Logger.LogInformation("Workflow Stage 4: Finalization");
            await Task.Delay(80);
            workflowStages.Add(new { Stage = 4, Name = "finalization", Headers = new Dictionary<string, string>(CorrelationIdService.CapturedHeaders) });

            var result = new
            {
                Message = "Complex Workflow Demo Completed",
                WorkflowStages = workflowStages,
                FinalCorrelationId = CorrelationIdService.CorrelationId,
                FinalHeaders = CorrelationIdService.CapturedHeaders,
                Summary = "Each stage added/updated headers and made HTTP calls with full context propagation",
                Timestamp = DateTime.UtcNow
            };

            Logger.LogInformation("Complex workflow demo completed successfully");

            return await CreateJsonResponseAsync(req, result);
        });
    }

    /// <summary>
    /// <summary>
    /// Health check endpoint to verify correlation ID configuration
    /// </summary>
    [Function("HealthCheck")]
    public async Task<HttpResponseData> HealthCheck(
        [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "health")] HttpRequestData req)
    {
        return await ExecuteWithCorrelationAsync(req, async () =>
        {
            Logger.LogInformation("Health check requested");

            var healthStatus = new
            {
                Status = "Healthy",
                CorrelationIdService = "Active",
                CorrelationId = CorrelationIdService.CorrelationId,
                ConfiguredHeaders = new[]
                {
                    "X-Custom-Correlation-Id (correlation ID header)",
                    "X-Event-Id (additional header)",
                    "X-User-Id (additional header)",
                    "X-Request-Source (additional header)",
                    "X-Tenant-Id (additional header)"
                },
                Features = new[]
                {
                    "Auto-generation of correlation IDs",
                    "Capture of additional headers",
                    "Automatic HTTP client propagation",
                    "Response header injection",
                    "Structured logging with correlation context"
                },
                Timestamp = DateTime.UtcNow
            };

            Logger.LogInformation("Health check completed");

            return await CreateJsonResponseAsync(req, healthStatus);
        });
    }
}
